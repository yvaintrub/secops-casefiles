# 🛡 Demo Case: GCP Service Account Key Abuse (Anonymized)

## 📌 Executive Summary
This case describes a **GCP compromise** where a leaked **service account key** was abused.  
The attacker authenticated directly to Google Cloud APIs, escalated privileges by impersonating other service accounts, and accessed sensitive GCS buckets.  
Persistence was achieved by creating a new service account with **Owner** role.  

**🎯 Outcome:** confirmed cloud credential theft, privilege escalation, sensitive data exfiltration, and persistence.

---

## 🖼 Attack Flow (ASCII Diagram)

+----------------------------+
| External Attacker          |
| (Leaked GCP SA Key)        |
+----------------------------+
             |
             v
+----------------------------+
| gcloud auth activate       |
| (Initial Access)           |
+----------------------------+
             |
             v
+----------------------------+
| Reconnaissance             |
| - gcloud projects list     |
| - gcloud storage buckets   |
+----------------------------+
             |
             v
+----------------------------+
| Privilege Escalation       |
| Service Account Imperson.  |
| → Owner Role               |
+----------------------------+
             |
             v
+----------------------------+
| Data Exfiltration          |
| gsutil cp GCS → External   |
+----------------------------+
             |
             v
+----------------------------+
| Persistence                |
| New SA Key w/ Owner Role   |
+----------------------------+

---

## 📖 Attack Narrative

### Stage 1 – Initial Access
- 🔴 Leaked **service account JSON key** discovered in public GitHub repo.  
- 🟡 Attacker used `gcloud auth activate-service-account --key-file=key.json`.  

### Stage 2 – Reconnaissance
- 🔴 Enumerated project IDs with `gcloud projects list`.  
- 🟡 Listed GCS buckets: `gcloud storage buckets list`.  

### Stage 3 – Privilege Escalation
- 🔴 Abused **Service Account Impersonation** to escalate to `roles/owner`.  

### Stage 4 – Exfiltration & Persistence
- 🔴 Exfiltrated bucket data: `gsutil -m cp -r gs://sensitive-bucket ./loot`.  
- 🟡 Created **new service account** + key with `roles/owner` for persistence.  

---

## ⏱️ Timeline (UTC)

| Time   | Event                                                   |
|--------|---------------------------------------------------------|
| 11:05  | 🔴 SA key used for authentication                       |
| 11:15  | 🟡 Recon: listed projects and storage buckets            |
| 11:30  | 🔴 Service account impersonation → Owner role            |
| 11:45  | 🔴 Exfiltration: GCS data copied externally              |
| 12:10  | 🟡 New SA + Owner role created for persistence            |

---

## 🔑 Key Findings
- Service account key exposed in public repo.  
- Attacker escalated via **SA impersonation**.  
- Sensitive data exfiltrated from Google Cloud Storage.  
- Persistence maintained via new **rogue SA with Owner role**.  

---

## 🗂️ MITRE ATT&CK Mapping
- **T1552.001 – Unsecured Credentials (Exposed Keys)**  
- **T1078.004 – Valid Accounts: Cloud Accounts**  
- **T1098 – Account Manipulation (SA Impersonation)**  
- **T1530 – Data Exfiltration from Cloud Storage**  
- **T1136.003 – Create Account (New Service Account)**  

---

## 👀 Detection Use Cases
- 🚨 Alert on usage of service account keys from unknown IPs.  
- Detect `gcloud auth activate-service-account` executions.  
- Monitor **SA impersonation** calls → privilege escalation.  
- Alert on creation of new service accounts with `roles/owner`.  
- Detect large-volume `gsutil cp` activity to external destinations.  

---

## 🛡️ Recommendations
- Rotate & revoke leaked service account keys immediately.  
- Use **Workload Identity Federation** instead of long-lived keys.  
- Restrict **SA impersonation** to least privilege.  
- Enable **Cloud Audit Logs** for SA activity.  
- Implement DLP & monitoring for GCS bucket exfiltration.  
