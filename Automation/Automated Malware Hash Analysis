# üß™ Automated Malware Hash Analysis (XSOAR Playbook)

## üìå Executive Summary
When an **EDR raises a malware alert**, analysts often waste time manually extracting file hashes and looking them up in threat intel feeds.  
With **XSOAR automation**, the process becomes fully automatic: hash ‚Üí TI lookup ‚Üí scoring ‚Üí enforcement.  

**üéØ Outcome:** reduced manual overhead, faster isolation, and ~30‚Äì40% reduction in response time.

____________________________________________________________________________________________________________________________________________________

## üñº Flow (ASCII Diagram)

```
+-------------------------+
| Malware Alert (EDR)     |
+-------------------------+
           |
           v
+-------------------------+
| Extract File Hash (SHA) |
+-------------------------+
           |
           v
+-------------------------+
| Query Threat Intel Feeds|
| (VT, HybridAnalysis)    |
+-------------------------+
           |
           v
+-------------------------+
| Auto-Score Maliciousness|
+-------------------------+
           |
           v
+-------------------------+
| Update Incident +       |
| Auto-Isolation (EDR)    |
+-------------------------+
```

____________________________________________________________________________________________________________________________________________________

## üìÇ IOC Example (artifact passed into playbook)

```
IOC Type: File Hash
Value: e99a18c428cb38d5f260853678922e03abd8334f
Verdict: Malicious (30/70 engines in VT)
Action: Isolate endpoint via CrowdStrike
```

____________________________________________________________________________________________________________________________________________________

## üíæ Automation Script (XSOAR Python) ‚Äî `Hash_Lookup_and_Score.py`

```python
# type: automation (Python3)
# args: file_hash (required, SHA256 preferred)

def main():
    args = demisto.args()
    h = args.get("file_hash")
    if not h:
        return_error("file_hash argument required")

    results = []

    # Example TI queries (pseudo-calls)
    vt = demisto.executeCommand("vt-file-report", {"resource": h})
    hy = demisto.executeCommand("hybrid-analysis-search", {"hash": h})

    vt_score = vt[0].get("Contents", {}).get("positives", 0)
    engines = vt[0].get("Contents", {}).get("total", 70)
    hy_verdict = hy[0].get("Contents", {}).get("verdict", "unknown")

    # Auto-score
    if vt_score > 20 or hy_verdict == "malicious":
        score = "Malicious"
    elif vt_score > 0:
        score = "Suspicious"
    else:
        score = "Benign"

    md = f"### üß™ Hash Lookup\n- Hash: `{h}`\n- VirusTotal: {vt_score}/{engines}\n- HybridAnalysis: {hy_verdict}\n- Final Score: **{score}**"
    return_results(md)

try:
    main()
except Exception as e:
    return_error(f"Hash_Lookup_and_Score failed: {e}")
```

____________________________________________________________________________________________________________________________________________________

## üß© Mini-Playbook (YAML) ‚Äî `Playbook-Automated-Hash-Analysis.yml`

```yaml
name: Automated Malware Hash Analysis
description: Extract hash from EDR alert, query TI feeds, auto-score, update incident, isolate if malicious.
fromversion: "6.0.0"
tasks:
  "0":
    id: "0"
    type: start
    task:
      name: Start
    nexttasks:
      '#none#': ["1"]
  "1":
    id: "1"
    type: regular
    task:
      name: Hash Lookup + Scoring
      scriptName: Hash_Lookup_and_Score
    scriptarguments:
      file_hash: { simple: ${incident.filehash} }
    nexttasks:
      '#none#': ["2"]
  "2":
    id: "2"
    type: condition
    task:
      name: Malicious?
      conditions:
        - label: yes
          condition:
            - - operator: isEqualString
                left: ${Hash_Lookup_and_Score.Score}
                right: "Malicious"
    nexttasks:
      "yes": ["3"]
  "3":
    id: "3"
    type: regular
    task:
      name: Isolate Host via EDR
      script: CrowdStrike|||cs-isolate-host
      scriptarguments:
        hostname: { simple: ${incident.hostname} }
```

____________________________________________________________________________________________________________________________________________________

## üîî Slack Notification Example

```json
{
  "channel": "#soc-alerts",
  "text": "üß™ Malware Hash Analysis",
  "attachments": [
    {
      "color": "#ff0000",
      "title": "Hash Marked as Malicious",
      "fields": [
        { "title": "Hash", "value": "e99a18c428cb38d5f260853678922e03abd8334f", "short": false },
        { "title": "VT Detections", "value": "30/70", "short": true },
        { "title": "HybridAnalysis", "value": "malicious", "short": true },
        { "title": "Action", "value": "Endpoint Isolated", "short": false }
      ]
    }
  ]
}
```

____________________________________________________________________________________________________________________________________________________

## ‚úÖ How to Use
1. Malware alert arrives from **EDR**.  
2. Playbook extracts hash ‚Üí sends to **VT + HybridAnalysis**.  
3. Hash scored automatically: **Malicious / Suspicious / Benign**.  
4. If malicious ‚Üí auto-isolate endpoint + update case notes.  
5. SOC notified in Slack/Teams.

____________________________________________________________________________________________________________________________________________________

## üîê Security Notes
- Always enforce SHA256 standardization.  
- Use multiple TI feeds to avoid false negatives.  
- Keep auto-isolation gated by **SOC approval** in production.  
- Log enrichment + verdicts for auditing.

____________________________________________________________________________________________________________________________________________________

